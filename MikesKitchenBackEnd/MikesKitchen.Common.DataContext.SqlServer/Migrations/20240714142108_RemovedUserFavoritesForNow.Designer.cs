// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MikesKitchen.Common.DataContext.SqlServer;

#nullable disable

namespace MikesKitchen.Common.DataContext.SqlServer.Migrations
{
    [DbContext(typeof(MikesKitchenContext))]
    [Migration("20240714142108_RemovedUserFavoritesForNow")]
    partial class RemovedUserFavoritesForNow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"));

                    b.Property<int>("CookTime")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<int>("PrepTime")
                        .HasColumnType("int");

                    b.Property<int>("ServesDescriptorId")
                        .HasColumnType("int");

                    b.Property<int>("ServesQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId")
                        .HasName("PK__Recipes__FDD988B08DADB37A");

                    b.HasIndex("ServesDescriptorId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            CookTime = 15,
                            PrepTime = 25,
                            ServesDescriptorId = 1,
                            ServesQuantity = 1,
                            Title = "Beautiful Burger Buns",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<string>("Ingredient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitID");

                    b.HasKey("RecipeId", "IngredientId")
                        .HasName("PK_RecipeIngredient");

                    b.HasIndex("UnitId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 1,
                            Ingredient = "King Arthur Unbleached All-Purpose Flour",
                            Quantity = 420.0,
                            UnitId = 9
                        },
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 2,
                            Ingredient = "water, lukewarm",
                            Quantity = 227.0,
                            UnitId = 9
                        },
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 3,
                            Ingredient = "butter, at room temperature\r\n",
                            Quantity = 28.0,
                            UnitId = 9
                        },
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 4,
                            Ingredient = "large egg",
                            Quantity = 1.0,
                            UnitId = 1
                        },
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 5,
                            Ingredient = "granulated sugar",
                            Quantity = 50.0,
                            UnitId = 9
                        },
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 6,
                            Ingredient = "table salt",
                            Quantity = 10.0,
                            UnitId = 9
                        },
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 7,
                            Ingredient = "instant yeast",
                            Quantity = 9.0,
                            UnitId = 9
                        });
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.RecipeStep", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("RecipeId", "StepId")
                        .HasName("PK_RecipeStep");

                    b.ToTable("RecipeSteps");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            StepId = 1,
                            Step = "Weigh your flour; or measure it by gently spooning it into a cup, then sweeping off any excess."
                        },
                        new
                        {
                            RecipeId = 1,
                            StepId = 2,
                            Step = "To make the dough: Mix and knead all of the dough ingredients — by hand, mixer, or bread machine — to make a soft, smooth dough."
                        },
                        new
                        {
                            RecipeId = 1,
                            StepId = 3,
                            Step = "Cover the dough and let it rise until it's nearly doubled in bulk, about 1 to 2 hours."
                        },
                        new
                        {
                            RecipeId = 1,
                            StepId = 4,
                            Step = "To shape the buns: Gently deflate the dough and divide it into eight pieces (about 100g each); to make smaller or larger buns see \"tips,\" below. Shape each piece into a ball."
                        },
                        new
                        {
                            RecipeId = 1,
                            StepId = 5,
                            Step = "Flatten each dough ball with the palm of your hand until it's about 3\" across."
                        },
                        new
                        {
                            RecipeId = 1,
                            StepId = 6,
                            Step = "Place the buns on a lightly greased or parchment-lined baking sheet. Cover and let rise until noticeably puffy, about an hour. Toward the end of the rising time, preheat the oven to 375°F."
                        },
                        new
                        {
                            RecipeId = 1,
                            StepId = 7,
                            Step = "Brush the buns with about half of the melted butter. To make seeded buns, brush the egg white/water mixture right over the melted butter; it'll make the seeds adhere. Sprinkle buns with the seeds of your choice."
                        },
                        new
                        {
                            RecipeId = 1,
                            StepId = 8,
                            Step = "To bake the buns: Bake the buns for 15 to 18 minutes, until golden. Remove them from the oven and brush with the remaining melted butter; this will give the buns a satiny, buttery crust. If you've made seeded buns apply the melted butter carefully, to avoid brushing the seeds off the buns."
                        },
                        new
                        {
                            RecipeId = 1,
                            StepId = 9,
                            Step = "Cool the buns on a rack before slicing in half, horizontally. Use as a base for burgers (beef or plant-based) or any favorite sandwich filling."
                        },
                        new
                        {
                            RecipeId = 1,
                            StepId = 10,
                            Step = "Storage information: Store leftover buns, well-wrapped, at room temperature for several days; freeze for longer storage."
                        });
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.ServesDescriptor", b =>
                {
                    b.Property<int>("ServesDescriptorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServesDescriptorId"));

                    b.Property<string>("ServesDescriptor1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ServesDescriptor");

                    b.HasKey("ServesDescriptorId")
                        .HasName("PK__ServesDe__F4B29F657004D445");

                    b.ToTable("ServesDescriptors");

                    b.HasData(
                        new
                        {
                            ServesDescriptorId = 1,
                            ServesDescriptor1 = "Yields"
                        },
                        new
                        {
                            ServesDescriptorId = 2,
                            ServesDescriptor1 = "Makes"
                        });
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UnitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("UnitDescriptor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UnitId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            UnitDescriptor = "ea"
                        },
                        new
                        {
                            UnitId = 2,
                            UnitDescriptor = "tsp"
                        },
                        new
                        {
                            UnitId = 3,
                            UnitDescriptor = "tbsp"
                        },
                        new
                        {
                            UnitId = 4,
                            UnitDescriptor = "cup"
                        },
                        new
                        {
                            UnitId = 5,
                            UnitDescriptor = "pt"
                        },
                        new
                        {
                            UnitId = 6,
                            UnitDescriptor = "qt"
                        },
                        new
                        {
                            UnitId = 7,
                            UnitDescriptor = "gal"
                        },
                        new
                        {
                            UnitId = 8,
                            UnitDescriptor = "oz"
                        },
                        new
                        {
                            UnitId = 9,
                            UnitDescriptor = "g"
                        },
                        new
                        {
                            UnitId = 10,
                            UnitDescriptor = "kg"
                        },
                        new
                        {
                            UnitId = 11,
                            UnitDescriptor = "fl oz"
                        },
                        new
                        {
                            UnitId = 12,
                            UnitDescriptor = "lbs"
                        },
                        new
                        {
                            UnitId = 13,
                            UnitDescriptor = "ml"
                        },
                        new
                        {
                            UnitId = 14,
                            UnitDescriptor = "l"
                        });
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            Email = "sclazaro@gmail.com",
                            FirstName = "Sofia",
                            LastName = "Lazaro",
                            Password = "Password",
                            UserName = "sclazaro"
                        },
                        new
                        {
                            UserId = 1,
                            Email = "mpphelps@gmail.com",
                            FirstName = "Michael",
                            LastName = "Phelps",
                            Password = "Password",
                            UserName = "mpphelps"
                        });
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.Recipe", b =>
                {
                    b.HasOne("MikesKitchen.Common.EntityModels.SqlServer.ServesDescriptor", "ServesDescriptor")
                        .WithMany()
                        .HasForeignKey("ServesDescriptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MikesKitchen.Common.EntityModels.SqlServer.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserId");

                    b.Navigation("ServesDescriptor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.RecipeIngredient", b =>
                {
                    b.HasOne("MikesKitchen.Common.EntityModels.SqlServer.Recipe", null)
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MikesKitchen.Common.EntityModels.SqlServer.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.RecipeStep", b =>
                {
                    b.HasOne("MikesKitchen.Common.EntityModels.SqlServer.Recipe", null)
                        .WithMany("RecipeSteps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");

                    b.Navigation("RecipeSteps");
                });

            modelBuilder.Entity("MikesKitchen.Common.EntityModels.SqlServer.User", b =>
                {
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
